==================================================================================================
GIT COMMANDS
==================================================================================================
---------------------------------------------------------------------------------------------------
Initiating a new Repository
---------------------------------------------------------------------------------------------------
- creating a new repo: 
	git init <path to dir>

- adding files to the repo
	git add <filename> or git add . (to add all the files in the local repo) //this commands adds all the files and the changes made to the files to the staging area for further commit process.
	
- recording the changes made to the files in a local repository
	git commit -m "commit msg"

- In order to push changes (or newly created files) in the repository, one needs to "push" the data to the remote repo.
	git push or git push -u origin master (if pushing in the master branch). 

- git status command: 
	Returns the current state of the repo, returns current working branch, if a file is in the staging area but not committed it shows the status, if there aren't any changes->"nothing to commit".

---------------------------------------------------------------------------------------------------
Pushing changes to an existing Remote Repository
---------------------------------------------------------------------------------------------------
In order to push changes to a remote repo from your local repo, you must:
1. Pull (or fetch and merge) the changes made to the remote repo into the local repo.
2. Push your updates from the local repo to the remote repo.

Execute the following:
1. git pull <REMOTENAME> <BRANCHNAME>
2.  git push  <REMOTENAME> <BRANCHNAME> 
---------------------------------------------------------------------------------------------------
BRANCHING in Git:
---------------------------------------------------------------------------------------------------
Every branch in git is referenced by HEAD which points to the latest commit in the branch.
- git branch: shows all the branches present.

- git branch <new-branch-name>: 1. creates a new branch

- git checkout <name-of-branch>:
	to get into a branch.

- to merge two branches:
	git merge <branch-name>: this branch will be merged into the master branch.
- to delete a branch:
	git branch -d <branch-name>:
	here -d alerts for any unmerged changes in the branch while deletion, while if -D is used it will not give an alert and delete right away.

- git checkout -b <new branch name>: 2. Creates a new branch and enters into the branch.

==================================================================================================
TO CONNECT TO A REMOTE REPO ON GITHUB:
==================================================================================================
- git remote add origin <SSH LINK>:
	connects a local repo witha remote repo.
- git clone <SSH LINK>:
	creates a local working copy of an existing remote repo.
- git pull origin master: Pulls all the latest changes/updates made to the remote repository to the local repo.
- git push origin master: Pushes the changes from the local repo t the remote repo.

NOTE: Before calling on the push command make sure that the changes are committed to the local repo.

===================================================================================================
ADVANCED COMMANDS
===================================================================================================

- git stash: It is used to save changes when they're not in a state to commit to a repo.
	git stash -u
- Modifications by the command above can be listed by the follwing line.
	git stash list
- to inspect the stash:
	git stash show
- to know the history of commits related to a recent commit:
	git log, git log --author="author-name", git log --before="date value", git log --oneline.
- to revert to the last commit or file version: 
	git revert <hash-of-commit>(obtained from git log --oneline).




